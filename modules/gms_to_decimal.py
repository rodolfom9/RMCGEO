# -*- coding: utf-8 -*-
"""
/***************************************************************************
 classnomeDialog
                                 A QGIS plugin
 descricao
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-03-20
        git sha              : $Format:%H$
        copyright            : (C) 2025 by rodolfo
        email                : email
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QApplication
from qgis.PyQt.QtGui import QIcon

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), '..', 'ui', 'gms_decimal.ui'))


class GmsToDecimal(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None, iface=None):
        """Constructor."""
        super(GmsToDecimal, self).__init__(parent)
        self.iface = iface
        self.setupUi(self)

        self.clipboard = QApplication.clipboard()

        # Conexões dos sinais
        self.buttonconvertg.clicked.connect(self.convertparadecimal)  # Botão para DMS -> Decimal
        self.buttonconvertd.clicked.connect(self.convertparagraus)  # Botão para Decimal -> DMS
        self.copyqline.clicked.connect(self.copy)  # Copiar Grau Decimal
        self.copyqline2.clicked.connect(self.copy_dms)  # Copiar DMS
        #self.add_grau.textEdited.connect(self.digitagraus)  # Validação em tempo real para graus
        #self.add_minuto.textEdited.connect(self.digitagraus)  # Validação em tempo real para minutos
        #self.add_segundo.textEdited.connect(self.digitagraus)  # Validação em tempo real para segundos
        self.copyqline.setIcon(QIcon(':/images/themes/default/mActionEditCopy.svg'))
        self.copyqline2.setIcon(QIcon(':/images/themes/default/mActionEditCopy.svg'))

    def validate_input(self, sender, text, min_val, max_val):
        if sender in (self.add_grau, self.add_minuto):
            try:
                valor = int(text)
                if not (min_val <= valor <= max_val):
                    sender.setText("")
            except ValueError:
                sender.setText("")

    def digitagraus(self, valor):
        try:
            return float(valor)
        except ValueError:
            return None

    def convertparadecimal(self):
        try:
            graus = int(self.add_grau.text() or 0)
            minutos = int(self.add_minuto.text() or 0)
            segundos_text = self.add_segundo.text() or "0"

            # Valida segundos como float
            try:
                segundos = float(segundos_text)
            except ValueError:
                self.saida_decimal.setText("Erro nos segundos")
                return

            if graus < -360 or graus > 360:
                self.saida_decimal.setText("Entrada inválida (graus)")
                return
            if minutos < 0 or minutos > 59:
                self.saida_decimal.setText("Entrada inválida (minutos)")
                return
            if segundos < 0 or segundos > 59:
                self.saida_decimal.setText("Entrada inválida (segundos)")
                return

            # Conversão para graus decimais
            decimal = graus + (minutos / 60) + (segundos / 3600)

            # Exibe o resultado
            self.saida_decimal.setText(f"{decimal:.6f}")

        except ValueError:
            self.saida_decimal.setText("Erro")

    def convertparagraus(self):
        try:
            decimal = float(self.entrada_decimal.text() or 0)
            graus = int(decimal)
            minutos_float = (decimal - graus) * 60
            minutos = int(minutos_float)
            segundos = (minutos_float - minutos) * 60
            self.saida_grau.setText(str(graus))
            self.saida_minuto.setText(str(minutos))
            self.saida_segundo.setText(f"{segundos:.2f}")
        except ValueError:
            self.saida_grau.setText("Erro")
            self.saida_minuto.setText("Erro")
            self.saida_segundo.setText("Erro")

    def copy(self):
        try:
            s = self.saida_decimal.text()
            self.clipboard.setText(s)
            self.iface.statusBarIface().showMessage(f"'{s}' Copiado para a Area de Transferencia", 3000)
        except AttributeError as e:
            self.iface.statusBarIface().showMessage(f"Erro: {str(e)}", 5000)

    def copy_dms(self):
        try:
            s = f"{self.saida_grau.text()}° {self.saida_minuto.text()}' {self.saida_segundo.text()}\""
            self.clipboard.setText(s)
            self.iface.statusBarIface().showMessage(f"'{s}' Copiado para a Area de Transferencia", 3000)
        except AttributeError as e:
            self.iface.statusBarIface().showMessage(f"Erro: {str(e)}", 5000)

    def reset_fields(self):
        """Redefine todos os campos de entrada e saída para valores padrão."""
        self.add_grau.setText("")
        self.add_minuto.setText("")
        self.add_segundo.setText("")
        self.entrada_decimal.setText("")
        self.saida_decimal.setText("")
        self.saida_grau.setText("")
        self.saida_minuto.setText("")
        self.saida_segundo.setText("")

def run(iface):
    """Função para executar o diálogo de conversão GMS para decimal."""
    dlg = GmsToDecimal(iface=iface)
    dlg.reset_fields()
    dlg.show()
    dlg.exec_()

def unload():
    """Função para limpar recursos quando o plugin for descarregado."""
    pass