# -*- coding: utf-8 -*-
"""
/***************************************************************************
 classnome
                                 A QGIS plugin
 descricao
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-01-05
        copyright            : (C) 2025 by Rodolfo Martins de Carvalho
        email                : rodolfomartins09@gmail.com
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""

import sys
from os import path
sys.path.append(path.abspath(path.join(path.dirname(__file__), '..')))
from qgis.PyQt.QtWidgets import QAction, QMenu
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import Qt
from RMCGEO.modules.gms_to_decimal import run as run_gms_decimal # type: ignore
from RMCGEO.modules.street_view import run as run_street_view # type: ignore
from RMCGEO.modules.geo_to_utm import run as run_geo_utm # type: ignore
from RMCGEO.modules.geo_to_cartesiano import run as run_cart_geo # type: ignore
from RMCGEO.modules.point_insert import run as run_point_insert # type: ignore
from RMCGEO.modules.copy_coordenadas import run as run_copy_coord_def # type: ignore
from RMCGEO.modules.linha_pega_ponto import ToggleLigaLinha # type: ignore
from RMCGEO.modules.layout_creator import LayoutCriador # type: ignore
from RMCGEO.modules.declividade_calculator import run as run_declividade_calculator # type: ignore
from RMCGEO.modules.converter_geo_to_utm import ConversorGeoToUtm # type: ignore
from RMCGEO.modules.criador_memorial_0_1_0 import MemorialDescritivo010 # type: ignore
class classnome:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_menu = None

    def initGui(self):
        self.plugin_menu = QMenu("RMCGEO v0.1.0", self.iface.mainWindow().menuBar())
        self.iface.mainWindow().menuBar().addMenu(self.plugin_menu)
        
        submenu1 = QMenu("Memorial Descritivo TCC", self.plugin_menu)
        submenu1.setIcon(QIcon(':/images/themes/default/mActionShowPluginManager.svg'))
        self.plugin_menu.addMenu(submenu1)

        self.memorialgeo_0_1_0 = QAction(QIcon(':/images/themes/default/mActionEditTable.svg'),
        "Memorial Descritivo Automatizado 0.1.0", self.iface.mainWindow())
        self.memorialgeo_0_1_0.triggered.connect(lambda: MemorialDescritivo010(self.iface).run())
        submenu1.addAction(self.memorialgeo_0_1_0)

        submenu2 = QMenu("Aplicativos", self.plugin_menu)
        submenu2.setIcon(QIcon(':/images/themes/default/mActionShowPluginManager.svg'))
        self.plugin_menu.addMenu(submenu2)

        self.action24 = QAction(QIcon(':/images/themes/default/mIconSnappingOnScale.svg'),
        "Liga Linha", self.iface.mainWindow())
        self.action24.triggered.connect(lambda: ToggleLigaLinha(self.iface).run())
        submenu2.addAction(self.action24)

        self.action22 = QAction(QIcon(':/images/themes/default/gpsicons/mActionAddTrackPoint.svg'),
        "Inserir Ponto (X,Y)", self.iface.mainWindow())
        self.action22.triggered.connect(lambda: run_point_insert(self.iface))
        submenu2.addAction(self.action22)

        self.action_declividade = QAction(QIcon(':/images/themes/default/mActionElevationProfile.svg'),
        "Calculadora de Declividade", self.iface.mainWindow())
        self.action_declividade.triggered.connect(lambda: run_declividade_calculator(self.iface))
        submenu2.addAction(self.action_declividade)

        submenu3 = QMenu("SCRIPTS", self.plugin_menu)
        submenu3.setIcon(QIcon(':/images/themes/default/processingAlgorithm.svg'))
        self.plugin_menu.addMenu(submenu3)

        self.action12 = QAction(QIcon(':/images/themes/default/mIconWms.svg'),
        "Street View", self.iface.mainWindow())
        self.action12.triggered.connect(lambda: run_street_view(self.iface))
        submenu3.addAction(self.action12)

        self.action21 = QAction(QIcon(':/images/themes/default/mActionEditCopy.svg'),
        "Copiar Coordenadas Lat/Long", self.iface.mainWindow())
        self.action21.triggered.connect(lambda: run_copy_coord(self.iface))
        submenu3.addAction(self.action21)

        self.action23 = QAction(QIcon(':/images/themes/default/mActionEditCopy.svg'),
        "Copiar Coordenadas pelo SRC", self.iface.mainWindow())
        self.action23.triggered.connect(lambda: run_copy_coord_def(self.iface))
        submenu3.addAction(self.action23)

        submenu4 = QMenu("Conversores de Coordenadas", self.plugin_menu)
        submenu4.setIcon(QIcon(':/images/themes/default/mActionNewLayout.svg'))
        self.plugin_menu.addMenu(submenu4)

        self.action11 = QAction(QIcon(':/images/themes/default/mActionCalculateField.svg'),
        "Conversor de Graus 1.0", self.iface.mainWindow())
        self.action11.triggered.connect(lambda: run_gms_decimal(self.iface))
        submenu4.addAction(self.action11)

        self.conversor_avancado = QAction(QIcon(':/images/themes/default/mActionCalculateField.svg'),
        "Conversor de Coordenadas Avançado 2.0", self.iface.mainWindow())
        self.conversor_avancado.triggered.connect(lambda: self.run_conversor_avancado())
        submenu4.addAction(self.conversor_avancado)

        self.action13 = QAction(QIcon(':/images/themes/default/mActionCalculateField.svg'),
        "Conversor Geo/UTM 1.0", self.iface.mainWindow())
        self.action13.triggered.connect(lambda: run_geo_utm(self.iface))
        submenu4.addAction(self.action13)

        self.action14 = QAction(QIcon(':/images/themes/default/mActionCalculateField.svg'),
        "Conversor Geodesico/Cartesiano 1.0", self.iface.mainWindow())
        self.action14.triggered.connect(lambda: run_cart_geo(self.iface))
        submenu4.addAction(self.action14)

        submenu5 = QMenu("Manipulador de Layout", self.plugin_menu)
        submenu5.setIcon(QIcon(':/images/themes/default/mActionNewLayout.svg'))
        self.plugin_menu.addMenu(submenu5)

        self.action32 = QAction(QIcon(':/images/themes/default/mActionNewLayout.svg'),
        "Criação de Layout pré Configurado com QPT", self.iface.mainWindow())
        self.action32.triggered.connect(lambda: LayoutCriador(self.iface).run())
        submenu5.addAction(self.action32)

        submenu6 = QMenu("Manipulador de Atributos", self.plugin_menu)
        submenu6.setIcon(QIcon(':/images/themes/default/mActionFolder.svg'))
        self.plugin_menu.addMenu(submenu6)

        self.action33 = QAction(QIcon(':/images/themes/default/mIconInfo.svg'),
        "Troca Colunas entre Tabelas (fora de funcionamento)", self.iface.mainWindow())
        self.action33.triggered.connect(lambda: run_modulo32(self.iface))
        submenu6.addAction(self.action33)

        # Adicionar ação About
        self.action_about = QAction(QIcon(':/images/themes/default/mActionHelpContents.svg'),
            "Sobre o RMCGEO", self.iface.mainWindow())
        self.action_about.triggered.connect(self.show_about)
        self.plugin_menu.addAction(self.action_about)

    def show_about(self):
        """Mostra informações sobre o plugin"""
        from qgis.PyQt.QtWidgets import QMessageBox
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Sobre o RMCGEO")
        msg.setText("RMCGEO - Plugin de Ferramentas Geográficas")
        msg.setInformativeText("""
Plugin sendo desenvolvido para auxiliar em tarefas geográficas comuns:

• Conversão entre diferentes sistemas de coordenadas
• Ferramentas de edição e manipulação de feições
• Criação de layouts e mapas
• Manipulação de atributos

     Ainda em Desenvolvimento \n            EXPERIMENTAL CONTEM BUGS. \n                    telegram: @rodolfo09 @RMCGEO""")
        msg.exec_()

    def unload(self):
        if hasattr(self, 'plugin_menu'):
            self.plugin_menu.deleteLater()

    @staticmethod
    def classFactory(iface):
        return classnome(iface)
        
    def run_conversor_avancado(self):
        conversor = ConversorGeoToUtm(self.iface)
        conversor.run()
